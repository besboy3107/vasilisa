name: Generate Daily Articles

on:
  schedule:
    - cron: '0 5 * * *'
  workflow_dispatch: {}

jobs:
  generate:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    concurrency:
      group: content-generation
      cancel-in-progress: true
    env:
      CONTENT_BASE_DIR: content
      ARTICLES_PER_DAY: 10
      INLINE_IMAGES: 2
      IMAGE_PROVIDER: ${{ vars.IMAGE_PROVIDER || 'unsplash' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Preflight env check
        env:
          LLM_PROVIDER: ${{ vars.LLM_PROVIDER || 'openai' }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          UNSPLASH_ACCESS_KEY: ${{ secrets.UNSPLASH_ACCESS_KEY }}
          PEXELS_API_KEY: ${{ secrets.PEXELS_API_KEY }}
          PIXABAY_API_KEY: ${{ secrets.PIXABAY_API_KEY }}
          GIGACHAT_CLIENT_ID: ${{ secrets.GIGACHAT_CLIENT_ID }}
          GIGACHAT_CLIENT_SECRET: ${{ secrets.GIGACHAT_CLIENT_SECRET }}
          IMAGE_PROVIDER: ${{ env.IMAGE_PROVIDER }}
        run: |
          set -e
          echo "IMAGE_PROVIDER=${IMAGE_PROVIDER:-unsplash}"
          echo "LLM_PROVIDER=${LLM_PROVIDER}"
          if [ "${LLM_PROVIDER}" = "gigachat" ]; then
            if [ -z "$GIGACHAT_CLIENT_ID" ] || [ -z "$GIGACHAT_CLIENT_SECRET" ]; then
              echo "GIGACHAT creds are EMPTY"; exit 1; else echo "GIGACHAT creds are SET"; fi
          else
            if [ -z "$OPENAI_API_KEY" ]; then echo "OPENAI_API_KEY is EMPTY"; exit 1; else echo "OPENAI_API_KEY is SET"; fi
          fi
          if [ "${IMAGE_PROVIDER:-unsplash}" = "unsplash" ]; then
            if [ -z "$UNSPLASH_ACCESS_KEY" ]; then echo "UNSPLASH_ACCESS_KEY is EMPTY"; exit 1; else echo "UNSPLASH_ACCESS_KEY is SET"; fi
          elif [ "${IMAGE_PROVIDER}" = "pexels" ]; then
            if [ -z "$PEXELS_API_KEY" ]; then echo "PEXELS_API_KEY is EMPTY"; exit 1; else echo "PEXELS_API_KEY is SET"; fi
          else
            if [ -z "$PIXABAY_API_KEY" ]; then echo "PIXABAY_API_KEY is EMPTY"; exit 1; else echo "PIXABAY_API_KEY is SET"; fi
          fi

      - name: Prepare git config
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Show git info
        run: |
          set -x
          git --version
          git status -sb || true
          git remote -v || true
          echo "Branch: ${GITHUB_REF} / ${GITHUB_REF_NAME}"

      - name: Generate content
        env:
          LLM_PROVIDER: ${{ vars.LLM_PROVIDER || 'openai' }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          UNSPLASH_ACCESS_KEY: ${{ secrets.UNSPLASH_ACCESS_KEY }}
          PEXELS_API_KEY: ${{ secrets.PEXELS_API_KEY }}
          PIXABAY_API_KEY: ${{ secrets.PIXABAY_API_KEY }}
          GIGACHAT_CLIENT_ID: ${{ secrets.GIGACHAT_CLIENT_ID }}
          GIGACHAT_CLIENT_SECRET: ${{ secrets.GIGACHAT_CLIENT_SECRET }}
          IMAGE_PROVIDER: ${{ env.IMAGE_PROVIDER }}
          CONTENT_BASE_DIR: ${{ env.CONTENT_BASE_DIR }}
          ARTICLES_PER_DAY: ${{ env.ARTICLES_PER_DAY }}
          INLINE_IMAGES: ${{ env.INLINE_IMAGES }}
        run: |
          set -e
          python -m content_bot generate --count ${ARTICLES_PER_DAY}
          [ -d "${CONTENT_BASE_DIR}" ] && [ -n "$(ls -A "${CONTENT_BASE_DIR}" 2>/dev/null || true)" ] || {
            echo "No generated content found";
            exit 1;
          }

      - name: List generated files
        run: |
          echo "Listing ${CONTENT_BASE_DIR} (if exists)"
          if [ -d "${CONTENT_BASE_DIR}" ]; then
            ls -R "${CONTENT_BASE_DIR}" || true
          else
            echo "Directory ${CONTENT_BASE_DIR} does not exist"
          fi

      - name: Create pull request with generated content
        if: ${{ always() }}
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore(content): add daily generated articles"
          title: "chore(content): add daily generated articles"
          body: |
            Automated content generation.
            - Provider: ${{ env.IMAGE_PROVIDER }}
            - Articles: ${{ env.ARTICLES_PER_DAY }}
          branch: bot/daily-content
          branch-suffix: timestamp
          add-paths: |
            ${{ env.CONTENT_BASE_DIR }}/**
